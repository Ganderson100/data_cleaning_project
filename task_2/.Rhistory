library(here)
#test where the top level of the project directory is
here::here()
#use this to set the path to the data files
cake_ingredients <- read_csv(here("raw_data/cake-ingredients-1961.csv"))
library(readr)
library(tidyverse)
library(here)
#test where the top level of the project directory is
here::here()
#use this to set the path to the data files
cake_ingredients <- read_csv(here("raw_data/cake-ingredients-1961.csv"))
cake_ingredients_code <- read_csv(here("raw_data/cake_ingredient_code.csv"))
dim(cake_ingredients)
head(cake_ingredients, 10)
tail(cake_ingredients, 10)
names(cake_ingredients)
view(cake_ingredients)
dim(cake_ingredients)
head(cake_ingredients, 10)
tail(cake_ingredients, 10)
names(cake_ingredients)
view(cake_ingredients)
dim(cake_ingredients_code)
head(cake_ingredients_code, 10)
tail(cake_ingredients_code, 10)
names(cake_ingredients_code)
view(cake_ingredients_code)
library(here)
#test where the top level of the project directory is
here::here()
#use this to set the path to the data files
cake_ingredients <- read_csv(here("raw_data/cake-ingredients-1961.csv"))
cake_ingredients_code <- read_csv(here("raw_data/cake_ingredient_code.csv"))
library(readr)
library(tidyverse)
dim(cake_ingredients)
head(cake_ingredients, 10)
tail(cake_ingredients, 10)
names(cake_ingredients)
view(cake_ingredients)
dim(cake_ingredients)
head(cake_ingredients, 10)
tail(cake_ingredients, 10)
names(cake_ingredients)
view(cake_ingredients)
# remove "BM" column as it contains no data
cake_ingredients2 <- cake_ingredients %>%
select(-BM)
head(cake_ingredients2)
dim(cake_ingredients_code)
head(cake_ingredients_code, 10)
tail(cake_ingredients_code, 10)
names(cake_ingredients_code)
view(cake_ingredients_code)
dim(cake_ingredients_code)
head(cake_ingredients_code, 10)
tail(cake_ingredients_code, 10)
names(cake_ingredients_code)
view(cake_ingredients_code)
# change from wide to long
cake_ingredients3 <- cake_ingredients2 %>%
pivot_longer(cols = nchar(2),
names_to = "code",
values_to = "value")
cake_ingredients3
# change from wide to long
cake_ingredients3 <- cake_ingredients2 %>%
pivot_longer(cols = (character()),
names_to = "code",
values_to = "value")
# change from wide to long
cake_ingredients3 <- cake_ingredients2 %>%
pivot_longer(cols_only =  -Cake,
names_to = "code",
values_to = "value")
# change from wide to long
cake_ingredients3 <- cake_ingredients2 %>%
pivot_longer(cols_only =  -("Cake"),
names_to = "code",
values_to = "value")
# change from wide to long
cake_ingredients3 <- cake_ingredients2 %>%
pivot_longer(cols_only =  -"Cake",
names_to = "code",
values_to = "value")
# change from wide to long
cake_ingredients3 <- cake_ingredients2 %>%
pivot_longer(cols =  col_double(),
names_to = "code",
values_to = "value")
# change from wide to long
cake_ingredients3 <- cake_ingredients2 %>%
pivot_longer(cols = double(),
names_to = "code",
values_to = "value")
# change from wide to long
cake_ingredients3 <- cake_ingredients2 %>%
pivot_longer(-Cake,
names_to = "code",
values_to = "value")
cake_ingredients3
# Join the two tables using a left join on the code
cake_combined <- left_join(cake_ingredients3, cake_ingredients_code, "code")
cake_combined
library(readr)
library(tidyverse)
library(here)
#test where the top level of the project directory is
here::here()
#use this to set the path to the data files
cake_ingredients <- read_csv(here("raw_data/cake-ingredients-1961.csv"))
cake_ingredients_code <- read_csv(here("raw_data/cake_ingredient_code.csv"))
dim(cake_ingredients)
head(cake_ingredients, 10)
tail(cake_ingredients, 10)
names(cake_ingredients)
view(cake_ingredients)
# remove "BM" column as it contains no data
cake_ingredients2 <- cake_ingredients %>%
select(-BM)
head(cake_ingredients2)
# change from wide to long
cake_ingredients3 <- cake_ingredients2 %>%
pivot_longer(-Cake,
names_to = "code",
values_to = "value")
cake_ingredients3
dim(cake_ingredients_code)
head(cake_ingredients_code, 10)
tail(cake_ingredients_code, 10)
names(cake_ingredients_code)
view(cake_ingredients_code)
# The ingredient "Sour cream cup" needs separated into "Sour cream" as an ingredient and "cup" as a measure
# Think we use the separate() function.  Don't know how to do this for one value in a column.
# Join the two tables using a left join on the "code" variable
cake_combined <- left_join(cake_ingredients3, cake_ingredients_code, "code")
cake_combined
here::here()
write_csv(cake_combined, here("clean_data/clean_cake.csv"))
# Join the two tables using a left join on the "code" variable
clean_cake <- left_join(cake_ingredients3, cake_ingredients_code, "code")
clean_cake
here::here()
write_csv(clean_cake, here("clean_data/clean_cake.csv"))
library(tidyverse)
# load in cleaned data
library(here)
here::here()
clean_cake <- read_csv(here("clean_data/clean_cake.csv"))
view(clean_cake)
# Which cake has the most cocoa in it?
most_cocoa <- clean_cake %>%
select(Cake, value, ingredient) %>%
arrange(desc(value)) %>%
top_n(1)
most_cocoa
# Which cake has the most cocoa in it?
most_cocoa <- clean_cake %>%
select(Cake, value, ingredient) %>%
arrange(desc(value))
most_cocoa
# Which cake has the most cocoa in it?
most_cocoa <- clean_cake %>%
select(Cake, value, ingredient) %>%
filter(ingredient) %>%
arrange(desc(value))
# Which cake has the most cocoa in it?
most_cocoa <- clean_cake %>%
select(Cake, value, ingredient) %>%
filter(ingredient == "Cocoa") %>%
arrange(desc(value))
most_cocoa
# Which cake has the most cocoa in it?
most_cocoa <- clean_cake %>%
select(Cake, value, ingredient) %>%
filter(ingredient == "Cocoa") %>%
arrange(desc(value)) %>%
top_n(1)
most_cocoa
# Which cake has the most cocoa in it?
most_cocoa <- clean_cake %>%
select(Cake, value, ingredient) %>%
filter(ingredient == "Cocoa") %>%
arrange(desc(value)) %>%
most_cocoa
# Which cake has the most cocoa in it?
most_cocoa <- clean_cake %>%
select(Cake, value, ingredient) %>%
filter(ingredient == "Cocoa") %>%
arrange(desc(value))
most_cocoa
# For sponge cake, how many cups of ingredients are used in total?
sponge_cake_cups <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
filter(Cake == "Sponge cake") %>%
arrange(desc(value))
sponge_cake_cups
# For sponge cake, how many cups of ingredients are used in total?
sponge_cake_cups <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
filter(Cake == "Sponge cake") %>%
arrange(desc(value))
sponge_cake_cups
# For sponge cake, how many cups of ingredients are used in total?
sponge_cake_cups <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
filter(Cake == "Sponge cake")
sponge_cake_cups
# For sponge cake, how many cups of ingredients are used in total?
sponge_cake_cups <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
filter(Cake == "Sponge cake")
sponge_cake_cups
# For sponge cake, how many cups of ingredients are used in total?
sponge_cake_cups <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
filter(Cake == "Sponge") %>%
arrange(desc(value))
sponge_cake_cups
# Which cake has the most cocoa in it?
most_cocoa <- clean_cake %>%
select(Cake, value, ingredient) %>%
filter(ingredient == "Cocoa") %>%
top_n(1)
most_cocoa
# Which cake has the most cocoa in it?
most_cocoa <- clean_cake %>%
select(Cake, value, ingredient) %>%
filter(ingredient == "Cocoa") %>%
arrange(desc(value))
most_cocoa
# change from wide to long
cake_ingredients3 <- cake_ingredients2 %>%
pivot_longer(-Cake,
names_to = "code",
values_to = "value"),
# change from wide to long
cake_ingredients3 <- cake_ingredients2 %>%
pivot_longer(-Cake,
names_to = "code",
values_to = "value",
value_drop_na = TRUE)
# change from wide to long
cake_ingredients3 <- cake_ingredients2 %>%
pivot_longer(-Cake,
names_to = "code",
values_to = "value",
value_drop_na = TRUE)
# change from wide to long
cake_ingredients3 <- cake_ingredients2 %>%
pivot_longer(-Cake,
names_to = "code",
values_to = "value",
value_drop_na = TRUE
)
# change from wide to long
cake_ingredients3 <- cake_ingredients2 %>%
pivot_longer(-Cake,
names_to = "code",
values_to = "value")
cake_ingredients3
# remove NA's
cake_ingredients4 <- cake_ingredients3 %>%
drop_na()
# remove NA's
cake_ingredients4 <- cake_ingredients3 %>%
drop_na()
cake_ingredients4
# Join the two tables using a left join on the "code" variable
clean_cake <- left_join(cake_ingredients4, cake_ingredients_code, "code")
clean_cake
here::here()
write_csv(clean_cake, here("clean_data/clean_cake.csv"))
# load in cleaned data
library(here)
here::here()
clean_cake <- read_csv(here("clean_data/clean_cake.csv"))
view(clean_cake)
# Which cake has the most cocoa in it?
most_cocoa <- clean_cake %>%
select(Cake, value, ingredient) %>%
filter(ingredient == "Cocoa") %>%
arrange(desc(value))
most_cocoa
# For sponge cake, how many cups of ingredients are used in total?
sponge_cake_cups <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
filter(Cake == "Sponge") %>%
arrange(desc(value))
sponge_cake_cups
# For sponge cake, how many cups of ingredients are used in total?
sponge_cake_cups <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
filter(Cake == "Sponge", measure == "cup") %>%
arrange(desc(value))
sponge_cake_cups
# How many ingredients are measured in teaspoons?
ingredients_measured_in_teaspoons <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
filter(measure == "teaspoons")
ingredients_measured_in_teaspoons
# How many ingredients are measured in teaspoons?
ingredients_measured_in_teaspoons <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
filter(measure == "teaspoon")
ingredients_measured_in_teaspoons
# How many ingredients are measured in teaspoons?
ingredients_measured_in_teaspoons <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
filter(measure == "teaspoon") %>%
summarise(teaspoons = count())
# How many ingredients are measured in teaspoons?
ingredients_measured_in_teaspoons <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
filter(measure == "teaspoon") %>%
summarise(teaspoons = count(n))
# How many ingredients are measured in teaspoons?
ingredients_measured_in_teaspoons <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
filter(measure == "teaspoon") %>%
summarise(teaspoons = count(measure))
# How many ingredients are measured in teaspoons?
ingredients_measured_in_teaspoons <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
filter(measure == "teaspoon") %>%
summarise(teaspoons = length(measure))
ingredients_measured_in_teaspoons
# How many ingredients are measured in teaspoons?
ingredients_measured_in_teaspoons <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
filter(number_ingredients_measured_teaspoons == "teaspoon") %>%
summarise(teaspoons = length(measure))
# How many ingredients are measured in teaspoons?
ingredients_measured_in_teaspoons <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
filter(measure == "teaspoon") %>%
summarise(number_ingredients_measured_teaspoons = length(measure))
ingredients_measured_in_teaspoons
# Which cake has the most unique ingredients?
cake_with_most_unique_ingredients <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
filter(measure == "teaspoon") %>%
summarise(most_unique_ingredients = unique(ingredients))
# Which cake has the most unique ingredients?
cake_with_most_unique_ingredients <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
filter(measure == "teaspoon") %>%
summarise(most_unique_ingredients = unique(ingredient))
# Which cake has the most unique ingredients?
cake_with_most_unique_ingredients <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
summarise(most_unique_ingredients = unique(ingredient))
# Which cake has the most unique ingredients?
cake_with_most_unique_ingredients <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
summarise(most_unique_ingredients = length(unique(ingredient)))
cake_with_most_unique_ingredients
# Which cake has the most unique ingredients?
cake_with_most_unique_ingredients <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
group_by(Cake) %>%
summarise(most_unique_ingredients = length(unique(ingredient)))
cake_with_most_unique_ingredients
# Which cake has the most unique ingredients?
cake_with_most_unique_ingredients <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
group_by(Cake) %>%
summarise(most_unique_ingredients = length(unique(ingredient))) %>%
arrange(desc(most_unique_ingredients))
cake_with_most_unique_ingredients
# Which cake has the most unique ingredients?
# "Babas au Rhum" and "One Bowl Chocolate" have the most unique ingredients with 11 items
cake_with_most_unique_ingredients <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
group_by(Cake) %>%
summarise(unique_ingredients = length(unique(ingredient))) %>%
arrange(desc(unique_ingredients))
cake_with_most_unique_ingredients
# Which ingredients are used only once?
ingredients_used_once <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
group_by(ingredient) %>%
summarise(ingredients = length(ingredient)) %>%
arrange(desc(ingredients))
ingredients_used_once
# Which ingredients are used only once?
ingredients_used_once <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
group_by(ingredient) %>%
summarise(number_of_times_used = length(ingredient)) %>%
arrange(desc(number_of_times_used))
ingredients_used_once
# Which ingredients are used only once?
ingredients_used_once <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
group_by(ingredient) %>%
summarise(number_of_times_used = length(ingredient)) %>%
arrange(number_of_times_used = 1)
# Which ingredients are used only once?
ingredients_used_once <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
group_by(ingredient) %>%
summarise(number_of_times_used = length(ingredient)) %>%
arrange(number_of_times_used == 1)
ingredients_used_once
# Which ingredients are used only once?
ingredients_used_once <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
group_by(ingredient) %>%
summarise(number_of_times_used = length(ingredient)) %>%
arrange(desc(number_of_times_used))
ingredients_used_once
# Which ingredients are used only once?
# Answer - Bananas, Cream of tartar, Crushed ice, Dried currants, Egg white, Nutmeg, Nuts,  & Zweibach
ingredients_used_once <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
group_by(ingredient) %>%
summarise(number_of_times_used = length(ingredient)) %>%
arrange(-desc(number_of_times_used))
ingredients_used_once
# Which ingredients are used only once?
# Answer - Bananas, Cream of tartar, Crushed ice, Dried currants, Egg white, Nutmeg, Nuts,  & Zweibach
ingredients_used_once <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
group_by(ingredient) %>%
summarise(number_of_times_used = length(ingredient)) %>%
filter(number_of_times_used == 1) %>%
arrange(-desc(number_of_times_used))
ingredients_used_once
# Which ingredients are used only once?
# Answer - Bananas, Cream of tartar, Crushed ice, Dried currants, Egg white, Nutmeg, Nuts,  & Zweibach
ingredients_used_once <- clean_cake %>%
select(Cake, value, ingredient, measure) %>%
group_by(ingredient) %>%
summarise(number_of_times_used = length(ingredient)) %>%
filter(number_of_times_used == 1)
# arrange(-desc(number_of_times_used))
ingredients_used_once
